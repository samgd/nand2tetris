// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // x control
    Not(in=zx, out=notZX);
    And16(
        a=x,
        b[0]=notZX,  b[1]=notZX,  b[2]=notZX,  b[3]=notZX,  b[4]=notZX,
        b[5]=notZX,  b[6]=notZX,  b[7]=notZX,  b[8]=notZX,  b[9]=notZX,
        b[10]=notZX, b[11]=notZX, b[12]=notZX, b[13]=notZX, b[14]=notZX,
        b[15]=notZX,
        out=mybZX
    );
    Not16(in=mybZX, out=nmybZX);
    Mux16(a=mybZX, b=nmybZX, sel=nx, out=outX);

    // y control
    Not(in=zy, out=notZY);
    And16(
        a=y,
        b[0]=notZY,  b[1]=notZY,  b[2]=notZY,  b[3]=notZY,  b[4]=notZY,
        b[5]=notZY,  b[6]=notZY,  b[7]=notZY,  b[8]=notZY,  b[9]=notZY,
        b[10]=notZY, b[11]=notZY, b[12]=notZY, b[13]=notZY, b[14]=notZY,
        b[15]=notZY,
        out=mybZY
    );
    Not16(in=mybZY, out=nmybZY);
    Mux16(a=mybZY, b=nmybZY, sel=ny, out=outY);

    // function
    And16(a=outX,  b=outY, out=andXY);
    Add16(a=outX,  b=outY, out=addXY);
    Mux16(a=andXY, b=addXY, sel=f, out=outF);

    // out control
    Not16(in=outF, out=notF);
    Mux16(
        a=outF, b=notF, sel=no,
        out=out, out[0..7]=low8, out[8..15]=high8, out[15]=msb
    );

    // status
    Or8Way(in=low8,  out=zrLow);
    Or8Way(in=high8, out=zrHigh);
    Or(a=zrLow, b=zrHigh, out=zrAll);
    Not(in=zrAll, out=zr);

    And(a=msb, b=true, out=ng);
}
